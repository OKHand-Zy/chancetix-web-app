// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole   @default(USER)
  accounts      Account[]
  cellphone     String?
  identity      String?
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  tickets     Ticket[]
}

model VerificationToken {
  id      String    @id @default( cuid() )
  email   String
  token   String    @unique
  expires DateTime
  
  @@unique([email, token])
}

model PasswordResetToken {
  id      String    @id @default(cuid())
  email   String
  token   String    @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String    @id @default(cuid())
  email   String
  token   String    @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String    @id @default(cuid())
  userId  String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Event {
  id          String    @id @default(cuid())
  name        String
  date        DateTime
  location    String
  capacity    Int
  image       String    @default("/images/activity_img/Null.png")
  tickets     Ticket[]  
  @@unique([id, image])
}

model Ticket {
  id            Int       @id @default(autoincrement())
  ticketNumber  Int?
  serialNumber  String?   @unique      
  tickettype    String?
  ticketGroup   String
  position      String?
  price         Int?
  customerName  String?
  user          User      @relation(fields: [userId], references: [id]) 
  userId        String
  event         Event     @relation(fields: [eventId,eventImage], references: [id,image]) 
  eventId       String
  eventImage    String 
  status        TicketStatus 
  transfer      Boolean   @default(false) 
}

model LTicket {
  id            Int        @id @default(autoincrement())    
  activityName  String?
  actype        String    
  acSerNumber   String?    @unique
  volunteer1    String?
  v1tickets     Int?
  volunteer2    String?
  v2tickets     Int?
  users         LTicketUser[]
}

model LTicketUser {
  id            Int        @id @default(autoincrement())
  lticket       LTicket     @relation(fields: [lTickeNumber], references: [acSerNumber]) 
  lTickeNumber  String
  userName      String?
  cellphone     Int?
  identity      String?
  
  @@unique([cellphone, identity])
}

enum TicketStatus {
  PURCHASED
  USED
  EXPIRED
}

model SubscribeTicket {
  id            String       @id @default(cuid())
  userId        String?
  eventId       String?
  tickettype    String?
  ticketGroup   String
  ticketCount   Int?
}

model PaymentOrder {
  id            String       @id @default(cuid())
  userId        String?
  eventId       String?
}

model SwitchTicket {
  id            Int        @id @default(autoincrement())
  userId        String?
  userName      String?
  eventName     String?
  ticketNumber  Int?      
  serialNumber  String?    @unique 
  tickettype    String?
  ticketGroup   String
  position      String?
  price         Int?
}

// 先 Pass 金流 發票 的問題

// Tasks Test Data
model Tasks {
  id        String    @id  
  title     String
  status    TasksStatus
  label     labelsStatus
  priority  PrioritiesStatus
}
enum TasksStatus {
  backlog
  todo
  in_progress
  done
  canceled
}
enum labelsStatus {
  bug
  feature
  documentation
}
enum PrioritiesStatus {
  low
  medium
  high
}