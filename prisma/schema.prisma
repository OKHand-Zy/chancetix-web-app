// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  cellphone             String?
  identity              String?
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  tickets               Ticket[]
  PendingTicket         PendingTicket[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Event {
  id            String          @id @default(cuid())
  name          String
  date          DateTime
  location      String
  capacity      Int
  image         String          @default("/images/activity_img/Null.png")
  tickets       Ticket[]
  TicketType    TicketTypes[]
  PendingTicket PendingTicket[]
}

model TicketTypes {
  id            String          @id @default(cuid()) 
  event         Event           @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId       String          
  typeName      String  
  TicketGroup   TicketGroups[]
  
  @@unique([id, eventId])
}

model TicketGroups {
  id            String          @id @default(cuid()) 
  TicketType    TicketTypes     @relation(fields: [ticketTypeId, eventId], references: [id,eventId], onDelete: Cascade)
  ticketTypeId  String       
  eventId       String
  groupName     String    
}

model PendingTicket {
  id           String   @id @default(cuid())
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String?
  Event        Event?   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String?
  serialNumber String?  @unique
  ticketType   String?  @default("normal")
  ticketGroup  String?  @default("standard")
  position     String?  @default("free")
  customerName String?  @default("unknown")
  price        Int?
  expires      DateTime
}

model Ticket {
  id           String       @id @default(cuid())
  serialNumber String?      @unique
  ticketType   String?      @default("normal")
  ticketGroup  String?      @default("standard")
  position     String?      @default("free")
  price        Int?
  customerName String?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  event        Event        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String
  status       TicketStatus @default(PURCHASED)
}

enum TicketStatus {
  PURCHASED
  USED
  EXPIRED
}

model LTicket {
  id           Int           @id @default(autoincrement())
  activityName String?
  actype       String
  acSerNumber  String?       @unique
  volunteerF   String?
  vFCounts     Int?
  volunteerS   String?
  vSCounts     Int?
  users        LTicketUser[]
}

model LTicketUser {
  id                Int     @id @default(autoincrement())
  lticket           LTicket @relation(fields: [tickeSerNumber], references: [acSerNumber], onDelete: Cascade)
  tickeSerNumber    String
  volunteerType     String?
  customerName      String?
  customerCellphone String?
  customerIdentity  String?

  @@unique([customerCellphone, customerIdentity])
}

model SubscribeTicket {
  id          String  @id @default(cuid())
  userId      String?
  eventId     String?
  tickettype  String?
  ticketGroup String
  ticketCount Int?
}

model PaymentOrder {
  id      String  @id @default(cuid())
  userId  String?
  eventId String?
}

model SwitchTicket {
  id           Int     @id @default(autoincrement())
  eventName    String?
  serialNumber String? @unique
  ticketType   String?
  ticketGroup  String?
  position     String?
  price        Int?
}

// 先 Pass 金流 發票 的問題

// Tasks Test Data
model Tasks {
  id       String           @id
  title    String
  status   TasksStatus
  label    labelsStatus
  priority PrioritiesStatus
}

enum TasksStatus {
  backlog
  todo
  in_progress
  done
  canceled
}

enum labelsStatus {
  bug
  feature
  documentation
}

enum PrioritiesStatus {
  low
  medium
  high
}
